package qesst.asu.edu.lilac;

/**
 *
 */
public class DummyData
{
	private int mIndex;
	private ModuleDataSet mBlakeSet;
	private ModuleDataSet mIVTesterSet;

	public DummyData()
	{
		mIndex = 0;
		mBlakeSet = new ModuleDataSet();
		float voltage = (0f);
		float current = (2.86f);
		mBlakeSet.add(new ModuleData(voltage, current));
		voltage = (0f);
		current = (2.91f);
		mBlakeSet.add(new ModuleData(voltage, current));
		voltage = (0f);
		current = (2.8f);
		mBlakeSet.add(new ModuleData(voltage, current));
		voltage = (2.23f);
		current = (2.83f);
		mBlakeSet.add(new ModuleData(voltage, current));
		voltage = (2.36f);
		current = (2.9f);
		mBlakeSet.add(new ModuleData(voltage, current));
		voltage = (2.49f);
		current = (2.96f);
		mBlakeSet.add(new ModuleData(voltage, current));
		voltage = (2.62f);
		current = (2.92f);
		mBlakeSet.add(new ModuleData(voltage, current));
		voltage = (2.74f);
		current = (2.9f);
		mBlakeSet.add(new ModuleData(voltage, current));
		voltage = (2.88f);
		current = (2.9f);
		mBlakeSet.add(new ModuleData(voltage, current));
		voltage = (3.01f);
		current = (2.89f);
		mBlakeSet.add(new ModuleData(voltage, current));
		voltage = (3.13f);
		current = (2.87f);
		mBlakeSet.add(new ModuleData(voltage, current));
		voltage = (3.26f);
		current = (2.87f);
		mBlakeSet.add(new ModuleData(voltage, current));
		voltage = (3.39f);
		current = (2.86f);
		mBlakeSet.add(new ModuleData(voltage, current));
		voltage = (3.52f);
		current = (2.85f);
		mBlakeSet.add(new ModuleData(voltage, current));
		voltage = (3.64f);
		current = (2.89f);
		mBlakeSet.add(new ModuleData(voltage, current));
		voltage = (3.77f);
		current = (2.89f);
		mBlakeSet.add(new ModuleData(voltage, current));
		voltage = (3.9f);
		current = (2.88f);
		mBlakeSet.add(new ModuleData(voltage, current));
		voltage = (4.02f);
		current = (2.92f);
		mBlakeSet.add(new ModuleData(voltage, current));
		voltage = (4.15f);
		current = (2.89f);
		mBlakeSet.add(new ModuleData(voltage, current));
		voltage = (4.28f);
		current = (2.82f);
		mBlakeSet.add(new ModuleData(voltage, current));
		voltage = (4.4f);
		current = (2.87f);
		mBlakeSet.add(new ModuleData(voltage, current));
		voltage = (4.53f);
		current = (2.78f);
		mBlakeSet.add(new ModuleData(voltage, current));
		voltage = (4.65f);
		current = (3.04f);
		mBlakeSet.add(new ModuleData(voltage, current));
		voltage = (4.78f);
		current = (2.79f);
		mBlakeSet.add(new ModuleData(voltage, current));
		voltage = (4.91f);
		current = (2.82f);
		mBlakeSet.add(new ModuleData(voltage, current));
		voltage = (5.03f);
		current = (2.82f);
		mBlakeSet.add(new ModuleData(voltage, current));
		voltage = (5.16f);
		current = (2.85f);
		mBlakeSet.add(new ModuleData(voltage, current));
		voltage = (5.29f);
		current = (2.86f);
		mBlakeSet.add(new ModuleData(voltage, current));
		voltage = (5.41f);
		current = (2.81f);
		mBlakeSet.add(new ModuleData(voltage, current));
		voltage = (5.54f);
		current = (2.89f);
		mBlakeSet.add(new ModuleData(voltage, current));
		voltage = (5.66f);
		current = (2.87f);
		mBlakeSet.add(new ModuleData(voltage, current));
		voltage = (5.79f);
		current = (2.85f);
		mBlakeSet.add(new ModuleData(voltage, current));
		voltage = (5.91f);
		current = (2.94f);
		mBlakeSet.add(new ModuleData(voltage, current));
		voltage = (6.04f);
		current = (2.96f);
		mBlakeSet.add(new ModuleData(voltage, current));
		voltage = (6.17f);
		current = (2.84f);
		mBlakeSet.add(new ModuleData(voltage, current));
		voltage = (6.29f);
		current = (2.89f);
		mBlakeSet.add(new ModuleData(voltage, current));
		voltage = (6.42f);
		current = (2.9f);
		mBlakeSet.add(new ModuleData(voltage, current));
		voltage = (6.54f);
		current = (2.9f);
		mBlakeSet.add(new ModuleData(voltage, current));
		voltage = (6.67f);
		current = (2.78f);
		mBlakeSet.add(new ModuleData(voltage, current));
		voltage = (6.79f);
		current = (2.78f);
		mBlakeSet.add(new ModuleData(voltage, current));
		voltage = (6.92f);
		current = (2.67f);
		mBlakeSet.add(new ModuleData(voltage, current));
		voltage = (7.04f);
		current = (2.61f);
		mBlakeSet.add(new ModuleData(voltage, current));
		voltage = (7.17f);
		current = (2.65f);
		mBlakeSet.add(new ModuleData(voltage, current));
		voltage = (7.29f);
		current = (2.57f);
		mBlakeSet.add(new ModuleData(voltage, current));
		voltage = (7.41f);
		current = (2.55f);
		mBlakeSet.add(new ModuleData(voltage, current));
		voltage = (7.54f);
		current = (2.5f);
		mBlakeSet.add(new ModuleData(voltage, current));
		voltage = (7.66f);
		current = (2.35f);
		mBlakeSet.add(new ModuleData(voltage, current));
		voltage = (7.79f);
		current = (2.27f);
		mBlakeSet.add(new ModuleData(voltage, current));
		voltage = (7.9f);
		current = (2.11f);
		mBlakeSet.add(new ModuleData(voltage, current));
		voltage = (8.03f);
		current = (1.94f);
		mBlakeSet.add(new ModuleData(voltage, current));
		voltage = (8.15f);
		current = (1.78f);
		mBlakeSet.add(new ModuleData(voltage, current));
		voltage = (8.27f);
		current = (1.49f);
		mBlakeSet.add(new ModuleData(voltage, current));
		voltage = (8.39f);
		current = (1.38f);
		mBlakeSet.add(new ModuleData(voltage, current));
		voltage = (8.5f);
		current = (1.29f);
		mBlakeSet.add(new ModuleData(voltage, current));
		voltage = (8.62f);
		current = (0.92f);
		mBlakeSet.add(new ModuleData(voltage, current));
		voltage = (8.72f);
		current = (0.62f);
		mBlakeSet.add(new ModuleData(voltage, current));
		voltage = (8.83f);
		current = (0.34f);
		mBlakeSet.add(new ModuleData(voltage, current));
		voltage = (8.92f);
		current = (0f);
		mBlakeSet.add(new ModuleData(voltage, current));
		voltage = (8.99f);
		current = (-0.05f);
		mBlakeSet.add(new ModuleData(voltage, current));
		voltage = (9.01f);
		current = (-0.04f);
		mBlakeSet.add(new ModuleData(voltage, current));
		voltage = (9.02f);
		current = (-0.11f);
		mBlakeSet.add(new ModuleData(voltage, current));
		voltage = (9.02f);
		current = (-0.09f);
		mBlakeSet.add(new ModuleData(voltage, current));
		voltage = (9.02f);
		current = (-0.04f);
		mBlakeSet.add(new ModuleData(voltage, current));
		voltage = (9.02f);
		current = (-0.04f);
		mBlakeSet.add(new ModuleData(voltage, current));
		voltage = (9.02f);
		current = (0.06f);
		mBlakeSet.add(new ModuleData(voltage, current));
		voltage = (9.02f);
		current = (0f);

		/*
		// Create the x/y data
		ArrayList<Float> xVals = new ArrayList<Float>();
		ArrayList<Float> yVals = new ArrayList<Float>();
		//ArrayList<Float> xValsModule = new ArrayList<Float>();
		//ArrayList<Float> yValsModule = new ArrayList<Float>();

		xVals.add(0.616260f);
		yVals.add(-2.838329f);
		xVals.add(0.616259f);
		yVals.add(-2.839691f);
		xVals.add(0.616178f);
		yVals.add(-2.806555f);
		xVals.add(0.616016f);
		yVals.add(-2.737790f);
		xVals.add(0.615760f);
		yVals.add(-2.630545f);
		xVals.add(0.615460f);
		yVals.add(-2.506859f);
		xVals.add(0.615131f);
		yVals.add(-2.376765f);
		xVals.add(0.614789f);
		yVals.add(-2.236040f);
		xVals.add(0.614411f);
		yVals.add(-2.090178f);
		xVals.add(0.614018f);
		yVals.add(-1.938360f);
		xVals.add(0.613614f);
		yVals.add(-1.783637f);
		xVals.add(0.613204f);
		yVals.add(-1.627546f);
		xVals.add(0.612780f);
		yVals.add(-1.470385f);
		xVals.add(0.612346f);
		yVals.add(-1.311742f);
		xVals.add(0.611898f);
		yVals.add(-1.151478f);
		xVals.add(0.611446f);
		yVals.add(-0.991861f);
		xVals.add(0.610987f);
		yVals.add(-0.831729f);
		xVals.add(0.610511f);
		yVals.add(-0.671144f);
		xVals.add(0.610025f);
		yVals.add(-0.511388f);
		xVals.add(0.609535f);
		yVals.add(-0.351863f);
		xVals.add(0.609042f);
		yVals.add(-0.193164f);
		xVals.add(0.608547f);
		yVals.add(-0.036694f);
		xVals.add(0.608047f);
		yVals.add(0.119321f);
		xVals.add(0.607538f);
		yVals.add(0.272681f);
		xVals.add(0.607025f);
		yVals.add(0.423938f);
		xVals.add(0.606513f);
		yVals.add(0.573265f);
		xVals.add(0.605991f);
		yVals.add(0.720500f);
		xVals.add(0.605479f);
		yVals.add(0.864940f);
		xVals.add(0.604958f);
		yVals.add(1.007670f);
		xVals.add(0.604445f);
		yVals.add(1.147195f);
		xVals.add(0.603918f);
		yVals.add(1.283966f);
		xVals.add(0.603391f);
		yVals.add(1.418956f);
		xVals.add(0.602865f);
		yVals.add(1.551326f);
		xVals.add(0.602335f);
		yVals.add(1.680671f);
		xVals.add(0.601814f);
		yVals.add(1.808060f);
		xVals.add(0.601292f);
		yVals.add(1.932722f);
		xVals.add(0.600764f);
		yVals.add(2.054746f);
		xVals.add(0.600233f);
		yVals.add(2.175245f);
		xVals.add(0.599709f);
		yVals.add(2.293630f);
		xVals.add(0.599182f);
		yVals.add(2.409721f);
		xVals.add(0.598640f);
		yVals.add(2.524224f);
		xVals.add(0.598105f);
		yVals.add(2.636672f);
		xVals.add(0.597573f);
		yVals.add(2.746718f);
		xVals.add(0.597036f);
		yVals.add(2.855006f);
		xVals.add(0.596494f);
		yVals.add(2.962570f);
		xVals.add(0.595949f);
		yVals.add(3.067031f);
		xVals.add(0.595404f);
		yVals.add(3.170218f);
		xVals.add(0.594857f);
		yVals.add(3.271489f);
		xVals.add(0.594300f);
		yVals.add(3.371185f);
		xVals.add(0.593752f);
		yVals.add(3.469336f);
		xVals.add(0.593198f);
		yVals.add(3.564737f);
		xVals.add(0.592640f);
		yVals.add(3.659996f);
		xVals.add(0.592084f);
		yVals.add(3.752447f);
		xVals.add(0.591524f);
		yVals.add(3.843393f);
		xVals.add(0.590964f);
		yVals.add(3.932670f);
		xVals.add(0.590409f);
		yVals.add(4.019735f);
		xVals.add(0.589843f);
		yVals.add(4.105698f);
		xVals.add(0.589285f);
		yVals.add(4.189244f);
		xVals.add(0.588714f);
		yVals.add(4.272393f);
		xVals.add(0.588153f);
		yVals.add(4.352924f);
		xVals.add(0.587589f);
		yVals.add(4.432699f);
		xVals.add(0.587025f);
		yVals.add(4.510342f);
		xVals.add(0.586457f);
		yVals.add(4.586808f);
		xVals.add(0.585882f);
		yVals.add(4.661444f);
		xVals.add(0.585319f);
		yVals.add(4.734057f);
		xVals.add(0.584751f);
		yVals.add(4.806094f);
		xVals.add(0.584182f);
		yVals.add(4.875941f);
		xVals.add(0.583614f);
		yVals.add(4.945200f);
		xVals.add(0.583045f);
		yVals.add(5.011706f);
		xVals.add(0.582465f);
		yVals.add(5.079003f);
		xVals.add(0.581803f);
		yVals.add(5.152923f);
		xVals.add(0.581132f);
		yVals.add(5.227229f);
		xVals.add(0.580475f);
		yVals.add(5.297794f);
		xVals.add(0.579882f);
		yVals.add(5.360138f);
		xVals.add(0.579322f);
		yVals.add(5.418061f);
		xVals.add(0.578745f);
		yVals.add(5.476149f);
		xVals.add(0.578168f);
		yVals.add(5.532765f);
		xVals.add(0.577582f);
		yVals.add(5.588497f);
		xVals.add(0.577003f);
		yVals.add(5.642922f);
		xVals.add(0.576421f);
		yVals.add(5.696587f);
		xVals.add(0.575844f);
		yVals.add(5.748863f);
		xVals.add(0.575257f);
		yVals.add(5.800317f);
		xVals.add(0.574672f);
		yVals.add(5.851007f);
		xVals.add(0.574094f);
		yVals.add(5.899820f);
		xVals.add(0.573511f);
		yVals.add(5.948440f);
		xVals.add(0.572921f);
		yVals.add(5.995890f);
		xVals.add(0.572328f);
		yVals.add(6.042675f);
		xVals.add(0.571745f);
		yVals.add(6.087916f);
		xVals.add(0.571158f);
		yVals.add(6.132869f);
		xVals.add(0.570569f);
		yVals.add(6.176287f);
		xVals.add(0.569978f);
		yVals.add(6.219440f);
		xVals.add(0.569386f);
		yVals.add(6.261631f);
		xVals.add(0.568795f);
		yVals.add(6.303636f);
		xVals.add(0.568204f);
		yVals.add(6.343752f);
		xVals.add(0.567605f);
		yVals.add(6.383313f);
		xVals.add(0.567009f);
		yVals.add(6.422524f);
		xVals.add(0.566413f);
		yVals.add(6.461024f);
		xVals.add(0.565805f);
		yVals.add(6.498108f);
		xVals.add(0.565214f);
		yVals.add(6.535284f);
		xVals.add(0.564617f);
		yVals.add(6.570828f);
		xVals.add(0.564013f);
		yVals.add(6.606290f);
		xVals.add(0.563412f);
		yVals.add(6.640902f);
		xVals.add(0.562810f);
		yVals.add(6.674692f);
		xVals.add(0.562197f);
		yVals.add(6.708254f);
		xVals.add(0.561596f);
		yVals.add(6.740327f);
		xVals.add(0.560988f);
		yVals.add(6.771924f);
		xVals.add(0.560373f);
		yVals.add(6.803769f);
		xVals.add(0.559766f);
		yVals.add(6.834502f);
		xVals.add(0.559143f);
		yVals.add(6.865188f);
		xVals.add(0.558527f);
		yVals.add(6.893925f);
		xVals.add(0.557914f);
		yVals.add(6.923377f);
		xVals.add(0.557291f);
		yVals.add(6.951442f);
		xVals.add(0.556673f);
		yVals.add(6.980005f);
		xVals.add(0.556057f);
		yVals.add(7.007298f);
		xVals.add(0.555436f);
		yVals.add(7.033835f);
		xVals.add(0.554811f);
		yVals.add(7.060216f);
		xVals.add(0.554183f);
		yVals.add(7.086145f);
		xVals.add(0.553566f);
		yVals.add(7.111072f);
		xVals.add(0.552934f);
		yVals.add(7.135927f);
		xVals.add(0.552300f);
		yVals.add(7.160251f);
		xVals.add(0.551669f);
		yVals.add(7.184265f);
		xVals.add(0.551036f);
		yVals.add(7.207731f);
		xVals.add(0.550407f);
		yVals.add(7.230426f);
		xVals.add(0.549770f);
		yVals.add(7.253274f);
		xVals.add(0.549122f);
		yVals.add(7.275148f);
		xVals.add(0.548481f);
		yVals.add(7.297110f);
		xVals.add(0.547829f);
		yVals.add(7.318619f);
		xVals.add(0.547189f);
		yVals.add(7.339432f);
		xVals.add(0.546534f);
		yVals.add(7.360200f);
		xVals.add(0.545874f);
		yVals.add(7.379688f);
		xVals.add(0.545217f);
		yVals.add(7.399669f);
		xVals.add(0.544561f);
		yVals.add(7.419290f);
		xVals.add(0.543902f);
		yVals.add(7.438415f);
		xVals.add(0.543230f);
		yVals.add(7.457052f);
		xVals.add(0.542559f);
		yVals.add(7.475638f);
		xVals.add(0.541882f);
		yVals.add(7.493200f);
		xVals.add(0.541211f);
		yVals.add(7.511170f);
		xVals.add(0.540533f);
		yVals.add(7.528115f);
		xVals.add(0.539850f);
		yVals.add(7.546035f);
		xVals.add(0.539160f);
		yVals.add(7.562334f);
		xVals.add(0.538479f);
		yVals.add(7.578958f);
		xVals.add(0.537780f);
		yVals.add(7.594713f);
		xVals.add(0.537086f);
		yVals.add(7.611117f);
		xVals.add(0.536392f);
		yVals.add(7.625958f);
		xVals.add(0.535701f);
		yVals.add(7.641609f);
		xVals.add(0.534990f);
		yVals.add(7.656382f);
		xVals.add(0.534275f);
		yVals.add(7.670929f);
		xVals.add(0.533559f);
		yVals.add(7.685779f);
		xVals.add(0.532841f);
		yVals.add(7.699889f);
		xVals.add(0.532123f);
		yVals.add(7.713322f);
		xVals.add(0.531397f);
		yVals.add(7.727532f);
		xVals.add(0.530671f);
		yVals.add(7.740999f);
		xVals.add(0.529938f);
		yVals.add(7.754287f);
		xVals.add(0.529200f);
		yVals.add(7.766515f);
		xVals.add(0.528456f);
		yVals.add(7.779207f);
		xVals.add(0.527704f);
		yVals.add(7.791469f);
		xVals.add(0.526951f);
		yVals.add(7.804351f);
		xVals.add(0.526201f);
		yVals.add(7.816432f);
		xVals.add(0.525437f);
		yVals.add(7.827842f);
		xVals.add(0.524667f);
		yVals.add(7.839404f);
		xVals.add(0.523890f);
		yVals.add(7.850453f);
		xVals.add(0.523116f);
		yVals.add(7.861988f);
		xVals.add(0.522326f);
		yVals.add(7.872736f);
		xVals.add(0.521533f);
		yVals.add(7.883269f);
		xVals.add(0.520738f);
		yVals.add(7.893890f);
		xVals.add(0.519933f);
		yVals.add(7.903779f);
		xVals.add(0.519131f);
		yVals.add(7.914500f);
		xVals.add(0.518311f);
		yVals.add(7.924246f);
		xVals.add(0.517493f);
		yVals.add(7.934125f);
		xVals.add(0.516668f);
		yVals.add(7.943471f);
		xVals.add(0.515837f);
		yVals.add(7.953091f);
		xVals.add(0.515004f);
		yVals.add(7.962260f);
		xVals.add(0.514147f);
		yVals.add(7.971334f);
		xVals.add(0.513293f);
		yVals.add(7.980201f);
		xVals.add(0.512430f);
		yVals.add(7.988379f);
		xVals.add(0.511557f);
		yVals.add(7.997431f);
		xVals.add(0.510679f);
		yVals.add(8.005906f);
		xVals.add(0.509790f);
		yVals.add(8.013737f);
		xVals.add(0.508899f);
		yVals.add(8.022453f);
		xVals.add(0.507995f);
		yVals.add(8.030263f);
		xVals.add(0.507094f);
		yVals.add(8.037869f);
		xVals.add(0.506169f);
		yVals.add(8.045991f);
		xVals.add(0.505234f);
		yVals.add(8.052884f);
		xVals.add(0.504291f);
		yVals.add(8.060434f);
		xVals.add(0.503346f);
		yVals.add(8.068024f);
		xVals.add(0.502384f);
		yVals.add(8.074392f);
		xVals.add(0.501410f);
		yVals.add(8.080986f);
		xVals.add(0.500432f);
		yVals.add(8.087906f);
		xVals.add(0.499441f);
		yVals.add(8.094934f);
		xVals.add(0.498442f);
		yVals.add(8.100959f);
		xVals.add(0.497422f);
		yVals.add(8.107550f);
		xVals.add(0.496395f);
		yVals.add(8.113940f);
		xVals.add(0.495341f);
		yVals.add(8.119851f);
		xVals.add(0.494292f);
		yVals.add(8.125981f);
		xVals.add(0.493221f);
		yVals.add(8.132357f);
		xVals.add(0.492141f);
		yVals.add(8.137860f);
		xVals.add(0.491048f);
		yVals.add(8.143481f);
		xVals.add(0.489938f);
		yVals.add(8.149346f);
		xVals.add(0.488811f);
		yVals.add(8.154633f);
		xVals.add(0.487670f);
		yVals.add(8.159891f);
		xVals.add(0.486508f);
		yVals.add(8.165599f);
		xVals.add(0.485340f);
		yVals.add(8.170279f);
		xVals.add(0.484145f);
		yVals.add(8.175831f);
		xVals.add(0.482932f);
		yVals.add(8.180524f);
		xVals.add(0.481705f);
		yVals.add(8.185273f);
		xVals.add(0.480453f);
		yVals.add(8.189951f);
		xVals.add(0.479180f);
		yVals.add(8.194724f);
		xVals.add(0.477891f);
		yVals.add(8.199054f);
		xVals.add(0.476574f);
		yVals.add(8.203389f);
		xVals.add(0.475229f);
		yVals.add(8.208248f);
		xVals.add(0.473879f);
		yVals.add(8.212814f);
		xVals.add(0.472491f);
		yVals.add(8.216519f);
		xVals.add(0.471080f);
		yVals.add(8.221277f);
		xVals.add(0.469640f);
		yVals.add(8.224771f);
		xVals.add(0.468180f);
		yVals.add(8.229290f);
		xVals.add(0.466696f);
		yVals.add(8.233066f);
		xVals.add(0.465173f);
		yVals.add(8.236453f);
		xVals.add(0.463620f);
		yVals.add(8.240283f);
		xVals.add(0.462031f);
		yVals.add(8.243839f);
		xVals.add(0.460413f);
		yVals.add(8.247923f);
		xVals.add(0.458769f);
		yVals.add(8.251069f);
		xVals.add(0.457084f);
		yVals.add(8.254434f);
		xVals.add(0.455366f);
		yVals.add(8.258380f);
		xVals.add(0.453599f);
		yVals.add(8.261287f);
		xVals.add(0.451802f);
		yVals.add(8.264726f);
		xVals.add(0.449949f);
		yVals.add(8.267968f);
		xVals.add(0.448061f);
		yVals.add(8.270697f);
		xVals.add(0.446120f);
		yVals.add(8.273553f);
		xVals.add(0.444147f);
		yVals.add(8.276314f);
		xVals.add(0.442101f);
		yVals.add(8.279142f);
		xVals.add(0.440022f);
		yVals.add(8.282319f);
		xVals.add(0.437881f);
		yVals.add(8.285000f);
		xVals.add(0.435689f);
		yVals.add(8.288203f);
		xVals.add(0.433433f);
		yVals.add(8.290247f);
		xVals.add(0.431111f);
		yVals.add(8.292912f);
		xVals.add(0.428728f);
		yVals.add(8.295575f);
		xVals.add(0.426292f);
		yVals.add(8.298088f);
		xVals.add(0.423774f);
		yVals.add(8.300618f);
		xVals.add(0.421186f);
		yVals.add(8.303195f);
		xVals.add(0.418530f);
		yVals.add(8.304518f);
		xVals.add(0.415786f);
		yVals.add(8.307214f);
		xVals.add(0.412968f);
		yVals.add(8.309503f);
		xVals.add(0.410059f);
		yVals.add(8.311826f);
		xVals.add(0.407085f);
		yVals.add(8.314450f);
		xVals.add(0.404008f);
		yVals.add(8.316293f);
		xVals.add(0.400849f);
		yVals.add(8.317798f);
		xVals.add(0.397596f);
		yVals.add(8.319357f);
		xVals.add(0.394263f);
		yVals.add(8.321113f);
		xVals.add(0.390823f);
		yVals.add(8.323277f);
		xVals.add(0.387287f);
		yVals.add(8.325235f);
		xVals.add(0.383667f);
		yVals.add(8.326948f);
		xVals.add(0.379938f);
		yVals.add(8.328710f);
		xVals.add(0.376126f);
		yVals.add(8.330609f);
		xVals.add(0.372219f);
		yVals.add(8.332220f);
		xVals.add(0.368218f);
		yVals.add(8.333170f);
		xVals.add(0.364121f);
		yVals.add(8.335240f);
		xVals.add(0.359929f);
		yVals.add(8.336228f);
		xVals.add(0.355632f);
		yVals.add(8.337906f);
		xVals.add(0.351254f);
		yVals.add(8.339342f);
		xVals.add(0.346806f);
		yVals.add(8.340751f);
		xVals.add(0.342305f);
		yVals.add(8.341687f);
		xVals.add(0.337699f);
		yVals.add(8.342972f);
		xVals.add(0.333038f);
		yVals.add(8.344267f);
		xVals.add(0.328328f);
		yVals.add(8.345491f);
		xVals.add(0.323564f);
		yVals.add(8.346901f);
		xVals.add(0.318747f);
		yVals.add(8.348346f);
		xVals.add(0.313889f);
		yVals.add(8.349130f);
		xVals.add(0.309004f);
		yVals.add(8.350000f);
		xVals.add(0.304104f);
		yVals.add(8.351203f);
		xVals.add(0.299174f);
		yVals.add(8.352004f);
		xVals.add(0.294239f);
		yVals.add(8.353325f);
		xVals.add(0.289296f);
		yVals.add(8.353822f);
		xVals.add(0.284334f);
		yVals.add(8.355110f);
		xVals.add(0.279398f);
		yVals.add(8.356491f);
		xVals.add(0.274452f);
		yVals.add(8.357657f);
		xVals.add(0.269513f);
		yVals.add(8.358001f);
		xVals.add(0.264598f);
		yVals.add(8.359048f);
		xVals.add(0.259703f);
		yVals.add(8.360123f);
		xVals.add(0.254828f);
		yVals.add(8.361113f);
		xVals.add(0.249987f);
		yVals.add(8.361618f);
		xVals.add(0.245178f);
		yVals.add(8.362094f);
		xVals.add(0.240417f);
		yVals.add(8.362926f);
		xVals.add(0.235742f);
		yVals.add(8.363850f);
		xVals.add(0.231139f);
		yVals.add(8.364458f);
		xVals.add(0.226597f);
		yVals.add(8.365372f);
		xVals.add(0.222158f);
		yVals.add(8.366079f);
		xVals.add(0.217917f);
		yVals.add(8.366930f);
		xVals.add(0.213939f);
		yVals.add(8.367309f);
		xVals.add(0.210320f);
		yVals.add(8.367779f);
		xVals.add(0.207075f);
		yVals.add(8.368056f);
		xVals.add(0.204171f);
		yVals.add(8.368546f);
		xVals.add(0.201517f);
		yVals.add(8.369328f);
		xVals.add(0.199012f);
		yVals.add(8.369742f);
		xVals.add(0.196558f);
		yVals.add(8.370048f);
		xVals.add(0.194052f);
		yVals.add(8.370699f);
		xVals.add(0.191482f);
		yVals.add(8.370821f);
		xVals.add(0.188837f);
		yVals.add(8.371216f);
		xVals.add(0.186146f);
		yVals.add(8.371219f);
		xVals.add(0.183414f);
		yVals.add(8.371706f);
		xVals.add(0.180674f);
		yVals.add(8.372281f);
		xVals.add(0.177912f);
		yVals.add(8.373431f);
		xVals.add(0.175169f);
		yVals.add(8.373121f);
		xVals.add(0.172457f);
		yVals.add(8.373440f);
		xVals.add(0.169777f);
		yVals.add(8.374027f);
		xVals.add(0.167132f);
		yVals.add(8.374330f);
		xVals.add(0.164532f);
		yVals.add(8.374280f);
		xVals.add(0.161951f);
		yVals.add(8.375131f);
		xVals.add(0.159407f);
		yVals.add(8.375890f);
		xVals.add(0.156910f);
		yVals.add(8.376200f);
		xVals.add(0.154450f);
		yVals.add(8.376812f);
		xVals.add(0.152047f);
		yVals.add(8.376748f);
		xVals.add(0.149675f);
		yVals.add(8.377171f);
		xVals.add(0.147351f);
		yVals.add(8.377895f);
		xVals.add(0.145062f);
		yVals.add(8.377626f);
		xVals.add(0.142816f);
		yVals.add(8.378109f);
		xVals.add(0.140620f);
		yVals.add(8.378488f);
		xVals.add(0.138470f);
		yVals.add(8.379061f);
		xVals.add(0.136365f);
		yVals.add(8.378937f);
		xVals.add(0.134315f);
		yVals.add(8.379505f);
		xVals.add(0.132311f);
		yVals.add(8.379438f);
		xVals.add(0.130347f);
		yVals.add(8.379900f);
		xVals.add(0.128428f);
		yVals.add(8.380376f);
		xVals.add(0.126555f);
		yVals.add(8.380043f);
		xVals.add(0.124737f);
		yVals.add(8.380796f);
		xVals.add(0.122941f);
		yVals.add(8.381056f);
		xVals.add(0.121180f);
		yVals.add(8.381496f);
		xVals.add(0.119479f);
		yVals.add(8.381404f);
		xVals.add(0.117811f);
		yVals.add(8.381725f);
		xVals.add(0.116175f);
		yVals.add(8.382500f);
		xVals.add(0.114579f);
		yVals.add(8.382589f);
		xVals.add(0.113032f);
		yVals.add(8.382807f);
		xVals.add(0.111499f);
		yVals.add(8.382787f);
		xVals.add(0.109989f);
		yVals.add(8.383210f);
		xVals.add(0.108509f);
		yVals.add(8.383127f);
		xVals.add(0.107059f);
		yVals.add(8.383281f);
		xVals.add(0.105650f);
		yVals.add(8.383760f);
		xVals.add(0.104282f);
		yVals.add(8.383765f);
		xVals.add(0.102930f);
		yVals.add(8.384068f);
		xVals.add(0.101623f);
		yVals.add(8.384133f);
		xVals.add(0.100339f);
		yVals.add(8.384601f);
		xVals.add(0.099080f);
		yVals.add(8.384520f);
		xVals.add(0.097857f);
		yVals.add(8.384479f);
		xVals.add(0.096664f);
		yVals.add(8.384818f);
		xVals.add(0.095498f);
		yVals.add(8.384999f);
		xVals.add(0.094356f);
		yVals.add(8.385415f);
		xVals.add(0.093235f);
		yVals.add(8.385541f);
		xVals.add(0.092133f);
		yVals.add(8.385283f);
		xVals.add(0.091053f);
		yVals.add(8.385413f);
		xVals.add(0.089998f);
		yVals.add(8.385668f);
		xVals.add(0.088973f);
		yVals.add(8.385662f);
		xVals.add(0.087964f);
		yVals.add(8.386091f);
		xVals.add(0.086972f);
		yVals.add(8.386532f);
		xVals.add(0.085999f);
		yVals.add(8.386329f);
		xVals.add(0.085048f);
		yVals.add(8.386751f);
		xVals.add(0.084094f);
		yVals.add(8.386462f);
		xVals.add(0.083173f);
		yVals.add(8.386930f);
		xVals.add(0.082242f);
		yVals.add(8.387116f);
		xVals.add(0.081309f);
		yVals.add(8.386788f);
		xVals.add(0.080403f);
		yVals.add(8.387295f);
		xVals.add(0.079500f);
		yVals.add(8.387546f);
		xVals.add(0.078635f);
		yVals.add(8.387008f);
		xVals.add(0.077783f);
		yVals.add(8.387847f);
		xVals.add(0.076957f);
		yVals.add(8.387450f);
		xVals.add(0.076139f);
		yVals.add(8.387457f);
		xVals.add(0.075329f);
		yVals.add(8.387445f);
		xVals.add(0.074542f);
		yVals.add(8.387532f);
		xVals.add(0.073789f);
		yVals.add(8.388265f);
		xVals.add(0.073065f);
		yVals.add(8.388535f);
		xVals.add(0.072328f);
		yVals.add(8.388323f);
		xVals.add(0.071614f);
		yVals.add(8.388166f);
		xVals.add(0.070910f);
		yVals.add(8.388438f);
		xVals.add(0.070213f);
		yVals.add(8.388525f);
		xVals.add(0.069534f);
		yVals.add(8.388473f);
		xVals.add(0.068864f);
		yVals.add(8.388706f);
		xVals.add(0.068216f);
		yVals.add(8.389005f);
		xVals.add(0.067600f);
		yVals.add(8.389042f);
		xVals.add(0.067026f);
		yVals.add(8.389597f);
		xVals.add(0.066408f);
		yVals.add(8.389305f);
		xVals.add(0.065787f);
		yVals.add(8.389270f);
		xVals.add(0.065184f);
		yVals.add(8.389903f);
		xVals.add(0.064578f);
		yVals.add(8.389386f);
		xVals.add(0.064003f);
		yVals.add(8.389763f);
		xVals.add(0.063459f);
		yVals.add(8.389662f);
		xVals.add(0.062902f);
		yVals.add(8.389651f);
		xVals.add(0.062381f);
		yVals.add(8.390280f);
		xVals.add(0.061878f);
		yVals.add(8.389998f);
		xVals.add(0.061364f);
		yVals.add(8.390281f);
		xVals.add(0.060855f);
		yVals.add(8.389921f);
		xVals.add(0.060349f);
		yVals.add(8.390630f);
		xVals.add(0.059857f);
		yVals.add(8.390066f);
		xVals.add(0.059364f);
		yVals.add(8.390864f);
		xVals.add(0.058881f);
		yVals.add(8.390360f);
		xVals.add(0.058396f);
		yVals.add(8.390284f);
		xVals.add(0.057909f);
		yVals.add(8.390366f);
		xVals.add(0.057436f);
		yVals.add(8.390746f);
		xVals.add(0.056974f);
		yVals.add(8.390562f);
		xVals.add(0.056521f);
		yVals.add(8.390560f);
		xVals.add(0.056070f);
		yVals.add(8.390951f);
		xVals.add(0.055613f);
		yVals.add(8.391310f);
		xVals.add(0.055161f);
		yVals.add(8.391013f);
		xVals.add(0.054707f);
		yVals.add(8.390871f);
		xVals.add(0.054261f);
		yVals.add(8.391153f);
		xVals.add(0.053812f);
		yVals.add(8.391101f);
		xVals.add(0.053372f);
		yVals.add(8.391172f);
		xVals.add(0.052927f);
		yVals.add(8.391507f);
		xVals.add(0.052494f);
		yVals.add(8.391414f);
		xVals.add(0.052059f);
		yVals.add(8.391272f);
		xVals.add(0.051628f);
		yVals.add(8.391618f);
		xVals.add(0.051212f);
		yVals.add(8.391641f);
		xVals.add(0.050795f);
		yVals.add(8.391473f);
		xVals.add(0.050383f);
		yVals.add(8.391496f);
		xVals.add(0.049964f);
		yVals.add(8.391830f);
		xVals.add(0.049560f);
		yVals.add(8.391861f);
		xVals.add(0.049161f);
		yVals.add(8.392181f);
		xVals.add(0.048748f);
		yVals.add(8.391429f);
		xVals.add(0.048348f);
		yVals.add(8.392170f);
		xVals.add(0.047961f);
		yVals.add(8.392008f);
		xVals.add(0.047574f);
		yVals.add(8.391723f);
		xVals.add(0.047203f);
		yVals.add(8.392035f);
		xVals.add(0.046884f);
		yVals.add(8.391718f);
		xVals.add(0.046557f);
		yVals.add(8.392050f);
		xVals.add(0.046202f);
		yVals.add(8.392304f);
		xVals.add(0.045844f);
		yVals.add(8.392484f);
		xVals.add(0.045494f);
		yVals.add(8.392048f);
		xVals.add(0.045155f);
		yVals.add(8.392604f);
		xVals.add(0.044813f);
		yVals.add(8.392498f);
		xVals.add(0.044469f);
		yVals.add(8.392428f);
		xVals.add(0.044131f);
		yVals.add(8.392245f);
		xVals.add(0.043805f);
		yVals.add(8.392904f);
		xVals.add(0.043480f);
		yVals.add(8.392572f);
		xVals.add(0.043164f);
		yVals.add(8.392573f);
		xVals.add(0.042841f);
		yVals.add(8.392689f);
		xVals.add(0.042524f);
		yVals.add(8.392964f);
		xVals.add(0.042207f);
		yVals.add(8.392985f);
		xVals.add(0.041896f);
		yVals.add(8.392625f);
		xVals.add(0.041590f);
		yVals.add(8.392691f);
		xVals.add(0.041288f);
		yVals.add(8.392736f);
		xVals.add(0.040982f);
		yVals.add(8.392986f);
		xVals.add(0.040690f);
		yVals.add(8.392962f);
		xVals.add(0.040402f);
		yVals.add(8.392776f);
		xVals.add(0.040114f);
		yVals.add(8.392984f);
		xVals.add(0.039823f);
		yVals.add(8.393233f);
		xVals.add(0.039505f);
		yVals.add(8.393333f);
		xVals.add(0.039177f);
		yVals.add(8.393220f);
		xVals.add(0.038858f);
		yVals.add(8.392918f);
		xVals.add(0.038544f);
		yVals.add(8.393673f);
		xVals.add(0.038220f);
		yVals.add(8.393235f);
		xVals.add(0.037900f);
		yVals.add(8.393018f);
		xVals.add(0.037594f);
		yVals.add(8.393575f);
		xVals.add(0.037288f);
		yVals.add(8.393146f);
		xVals.add(0.036999f);
		yVals.add(8.393258f);
		xVals.add(0.036705f);
		yVals.add(8.393835f);
		xVals.add(0.036426f);
		yVals.add(8.393257f);
		xVals.add(0.036146f);
		yVals.add(8.393533f);
		xVals.add(0.035887f);
		yVals.add(8.393940f);
		xVals.add(0.035643f);
		yVals.add(8.394252f);
		xVals.add(0.035388f);
		yVals.add(8.393875f);
		xVals.add(0.035120f);
		yVals.add(8.393843f);
		xVals.add(0.034867f);
		yVals.add(8.394352f);
		xVals.add(0.034617f);
		yVals.add(8.394002f);
		xVals.add(0.034368f);
		yVals.add(8.394278f);
		xVals.add(0.034130f);
		yVals.add(8.394577f);
		xVals.add(0.033890f);
		yVals.add(8.394710f);
		xVals.add(0.033660f);
		yVals.add(8.394297f);
		xVals.add(0.033427f);
		yVals.add(8.394093f);
		xVals.add(0.033193f);
		yVals.add(8.394392f);
		xVals.add(0.032962f);
		yVals.add(8.394261f);
		xVals.add(0.032721f);
		yVals.add(8.394419f);
		xVals.add(0.032466f);
		yVals.add(8.394088f);
		xVals.add(0.032219f);
		yVals.add(8.394035f);
		xVals.add(0.032005f);
		yVals.add(8.394505f);
		xVals.add(0.031792f);
		yVals.add(8.394169f);
		xVals.add(0.031569f);
		yVals.add(8.394482f);
		xVals.add(0.031370f);
		yVals.add(8.394729f);
		xVals.add(0.031194f);
		yVals.add(8.394847f);
		xVals.add(0.031006f);
		yVals.add(8.394284f);
		xVals.add(0.030814f);
		yVals.add(8.394754f);
		xVals.add(0.030635f);
		yVals.add(8.394875f);
		xVals.add(0.030425f);
		yVals.add(8.394626f);
		xVals.add(0.030195f);
		yVals.add(8.394521f);
		xVals.add(0.029989f);
		yVals.add(8.394762f);
		xVals.add(0.029775f);
		yVals.add(8.394463f);
		xVals.add(0.029613f);
		yVals.add(8.394751f);
		xVals.add(0.029419f);
		yVals.add(8.394400f);
		xVals.add(0.029237f);
		yVals.add(8.394827f);
		xVals.add(0.029042f);
		yVals.add(8.395068f);
		xVals.add(0.028862f);
		yVals.add(8.394820f);
		xVals.add(0.028687f);
		yVals.add(8.394644f);
		xVals.add(0.028512f);
		yVals.add(8.395192f);
		xVals.add(0.028326f);
		yVals.add(8.395362f);
		xVals.add(0.028156f);
		yVals.add(8.395027f);
		xVals.add(0.027981f);
		yVals.add(8.394718f);
		xVals.add(0.027807f);
		yVals.add(8.395116f);
		xVals.add(-0.004664f);
		yVals.add(8.400298f);

		 */

	}

	public ModuleDataSet getData()
	{
		return mBlakeSet;
	}

	public ModuleData getNextEntry()
	{
		if (mIndex >= mBlakeSet.size())
		{
			mIndex = 0;
		}

		return mBlakeSet.get(mIndex++);
	}
}
